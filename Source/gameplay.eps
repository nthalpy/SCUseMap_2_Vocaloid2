import musicSystem;
import soundEffect;
import answer;
import lyric;
import chatSystem;
import opening;
import ending;
import _;

var __GameStatus_Init = 0;
var __GameStatus_Opening = 1;
var __GameStatus_MainGame = 2;
var __GameStatus_Ending = 3;

var gameStatus = __GameStatus_Init;

const __sb = StringBuffer(1024);

var __answerMoveOffsetInMs = -30;
var __answerDisplayTimeInMs = 2000;
var __lyricMovOffsetInMs = 0;

var __answerIndex = -1;
var __lyricIndex = -1;

var __titleAnswerSubmitted = false;
var __composerAnswerSubmitted = false;

function proceedIndexIfPossible() {
    var currentTime = _.now() - musicSystem.musicStartTime;

    if (__answerIndex + 1 < answer.tableSize) {
        const ans = answer.data.cast(answer.table[__answerIndex + 1]);

        if (ans.timeInMs + __answerMoveOffsetInMs <= currentTime) {
            __answerIndex++;
            __titleAnswerSubmitted = false;
            __composerAnswerSubmitted = false;
        }
    }
    
    if (__lyricIndex + 1 < lyric.tableSize) {
        const lyric = lyric.data.cast(lyric.table[__lyricIndex + 1]);

        if (lyric.timeInMs + __lyricMovOffsetInMs <= currentTime)
            __lyricIndex++;
    }

    if (lyric.endingTimeInMs + __lyricMovOffsetInMs <= currentTime) {
        __answerIndex = -1;
        __lyricIndex = -1;
        return false;
    }

    return true;
}

const __chatEvent_Ptr = $U("Jump Gate");
const __chatEvent_PtrAddr = $U("Ruins");

const __unknown = Db("[???]");

function renderPreQuestion() {
    const nextAns = answer.data.cast(answer.table[0]);
    var currentTime = _.now() - musicSystem.musicStartTime;
    var remainTime = 1 + ((nextAns.timeInMs - currentTime) - 1) / 1000;

    foreach (cp : EUDLoopPlayer("Human")) {
        setcurpl(cp);

        __sb.insert(0);
        __sb.append("\x13\x04", "\x17\x04", remainTime, "초 남음\n");

        __sb.append("\x13\x04", "곧 첫 번째 문제가 시작 됩니다!");

        __sb.DisplayAt(0);
    }
}
function render() {
    if (__lyricIndex == -1) {
        renderPreQuestion();
        return;
    }

    if (__lyricIndex >= lyric.tableSize)
        return;

    const ans = answer.data.cast(answer.table[__answerIndex]);
    const lyr = lyric.data.cast(lyric.table[__lyricIndex]);
 
    var nextAnswerTime = lyric.endingTimeInMs;
    if (__answerIndex + 1 < answer.tableSize) {
        const nextAns = answer.data.cast(answer.table[__answerIndex + 1]);
        nextAnswerTime = nextAns.timeInMs;
    }

    var currentTime = _.now() - musicSystem.musicStartTime;
    var remainTime = 1 + ((nextAnswerTime - currentTime) - __answerDisplayTimeInMs - 1) / 1000;

    var isAnswerDisplayTime = false;
    if (nextAnswerTime - currentTime <= __answerDisplayTimeInMs)
        isAnswerDisplayTime = true;

    foreach (cp : EUDLoopPlayer("Human")) {
        setcurpl(cp);

        // Print all strings
        __sb.insert(0);

        // check remainTime is negative
        if (isAnswerDisplayTime) {
            if (ans.titleAnswerTimeInMs == 0)
                ans.titleAnswerTimeInMs = _.now();
            
            if (ans.composerAnswerTimeInMs == 0)
                ans.composerAnswerTimeInMs = _.now();

            __sb.append("\x13\x04", "\x17#",  __answerIndex + 1, "\x1B, ", "정답 공개!\n");
        }
        else {
            __sb.append("\x13\x04", "\x17#",  __answerIndex + 1, "\x04, ", remainTime, "초 남음\n");
        }
        
        __sb.append("\x13\x04", ptr2s(lyr.pStrLyric), "\n");

        __sb.append("\x13\x04", "제목: ");
        if (__titleAnswerSubmitted || isAnswerDisplayTime) __sb.append("\x1F", ptr2s(ans.pStrMusicAnswer));
        else __sb.append("\x1D", ptr2s(__unknown));
        
        __sb.append("\x04, 작곡가: ");
        if (__composerAnswerSubmitted || isAnswerDisplayTime) __sb.append("\x17", ptr2s(ans.pStrComposerAnswer));
        else __sb.append("\x1C", ptr2s(__unknown));
        
        __sb.append("\x04, 투고일: \x0F", ptr2s(ans.pStrReleaseDate), "\n");

        __sb.DisplayAt(0);
    }
}

function exec() {
    chatSystem.replaceChat(__answerIndex);

    if (gameStatus == __GameStatus_Init) {
        foreach (cp : EUDLoopPlayer("Human")) {
            setcurpl(cp);
            soundEffect.playStartSE();
        }

        opening.startOpening();
        gameStatus = __GameStatus_Opening;
    }
    else if (gameStatus == __GameStatus_Opening) {
        opening.render();

        if (opening.isInOpening == false) {
            gameStatus = __GameStatus_MainGame;
        }
    }
    else if (gameStatus == __GameStatus_MainGame) {
        musicSystem.playMusic();
        
        foreach (cp : EUDLoopPlayer("Human")) {
            setcurpl(cp);

            var key = _.getDeathCount(cp, __chatEvent_Ptr);
            var result = answer.checkAnswer(key, __answerIndex);

            if (result == answer.checkAnswer_Title) {
                __titleAnswerSubmitted = true;
                soundEffect.playAnswerSE();
                SetScore(cp, Add, 1, Custom);
            }
            if (result == answer.checkAnswer_Composer) {
                __composerAnswerSubmitted = true;
                soundEffect.playAnswerSE();
                SetScore(cp, Add, 1, Custom);
            }
        }

        var proceeded = proceedIndexIfPossible();

        if (proceeded == false) {
            gameStatus = __GameStatus_Ending;
            ending.startEnding();    
        }
        else {
            render();
        }
    }
    else if (gameStatus == __GameStatus_Ending) {
        musicSystem.playMusic();

        ending.render();

        if (musicSystem.isInPlay == false) {
            foreach (cp : EUDLoopPlayer()) {
                setcurpl(cp);
                Victory();
            }
        }
    }
}

